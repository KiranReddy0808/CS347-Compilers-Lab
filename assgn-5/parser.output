Terminals unused in grammar

   ERROR


Grammar

    0 $accept: Input $end

    1 Input: Global_Statement Input
    2      | END

    3 Global_Statement: Var_Decl
    4                 | Func_Decl SEMI
    5                 | Func_Defn

    6 Var_Decl: INT Data_Type_Int Var_List SEMI Data_Type_None
    7         | FLOAT Data_Type_Flt Var_List SEMI Data_Type_None

    8 Data_Type_Flt: %empty

    9 Data_Type_Int: %empty

   10 Data_Type_None: %empty

   11 Var_List: Var COMMA Var_List
   12         | Var_Asgn COMMA Var_List
   13         | Var
   14         | Var_Asgn

   15 Var: ID
   16    | ID OPEN_BRAC Expression COMMA Dim_List CLOSE_BRAC
   17    | ID Brac_Dim_List

   18 Var_Asgn: Var ASGN Expression

   19 Dim_List: Expression COMMA Dim_List
   20         | Expression

   21 Brac_Dim_List: OPEN_BRAC Expression CLOSE_BRAC Brac_Dim_List
   22              | OPEN_BRAC Expression CLOSE_BRAC

   23 Func_Decl: INT Data_Type_Int ID Data_Type_None OPEN_PAR Decl_Param_List CLOSE_PAR
   24          | FLOAT Data_Type_Flt ID Data_Type_None OPEN_PAR Decl_Param_List CLOSE_PAR
   25          | VOID ID OPEN_PAR Decl_Param_List CLOSE_PAR
   26          | INT Data_Type_Int ID Data_Type_None OPEN_PAR CLOSE_PAR
   27          | FLOAT Data_Type_Flt ID Data_Type_None OPEN_PAR CLOSE_PAR
   28          | VOID ID OPEN_PAR CLOSE_PAR

   29 Decl_Param_List: Decl_Param COMMA Decl_Param_List
   30                | Defn_Param COMMA Decl_Param_List
   31                | Decl_Param
   32                | Defn_Param

   33 Func_Call: ID OPEN_PAR Param_List CLOSE_PAR

   34 Param_List: Expression COMMA Param_List
   35           | Expression

   36 Func_Defn: Func_Decl Block

   37 Decl_Param: INT
   38           | FLOAT

   39 Defn_Param: INT ID
   40           | FLOAT ID

   41 Statements: Statement Statements
   42           | Statement

   43 Statement: Non_Conditional_Statement
   44          | Conditional_Block

   45 Non_Conditional_Statement: Block
   46                          | Loop_Block
   47                          | Var_Decl
   48                          | Expression SEMI
   49                          | BREAK SEMI
   50                          | CONTINUE SEMI
   51                          | RETURN Expression SEMI
   52                          | SEMI

   53 Block: OPEN_CURLY Level_PP Statements Clear_Level Level_MM CLOSE_CURLY

   54 Loop_Block: FOR OPEN_PAR For_Control CLOSE_PAR Level_PP Statement Clear_Level Level_MM
   55           | WHILE OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM

   56 For_Control: Init_Statement Condition SEMI Expression
   57            | Init_Statement SEMI Expression

   58 Init_Statement: Expression SEMI
   59               | SEMI

   60 Conditional_Block: If_Else_Block
   61                  | Switch_Block

   62 If_Else_Block: IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM
   63              | IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM ELSE Level_PP Statement Clear_Level Level_MM

   64 Switch_Block: SWITCH OPEN_PAR Constant_Expression CLOSE_PAR OPEN_CURLY Switch_Body CLOSE_CURLY
   65             | SWITCH OPEN_PAR Var CLOSE_PAR OPEN_CURLY Switch_Body CLOSE_CURLY

   66 Switch_Body: CASE Constant_Expression COLON Level_PP Statements Clear_Level Level_MM Switch_Body
   67            | DEFAULT COLON Level_PP Statements Clear_Level Level_MM Switch_Body
   68            | CASE Constant_Expression COLON Level_PP Statements Clear_Level Level_MM
   69            | DEFAULT COLON Level_PP Statements Clear_Level Level_MM

   70 Condition: OPEN_PAR Condition CLOSE_PAR
   71          | NOT Condition
   72          | Condition OR Condition
   73          | Condition AND Condition
   74          | Expression LT Expression
   75          | Expression GT Expression
   76          | Expression LTE Expression
   77          | Expression GTE Expression
   78          | Expression EQ Expression
   79          | Expression NEQ Expression

   80 Constant_Expression: REAL
   81                    | OPEN_PAR Constant_Expression CLOSE_PAR
   82                    | Constant_Expression PLUS Constant_Expression
   83                    | Constant_Expression MINUS Constant_Expression
   84                    | Constant_Expression TIMES Constant_Expression
   85                    | Constant_Expression DIVIDE Constant_Expression
   86                    | Constant_Expression MODULO Constant_Expression
   87                    | MINUS Constant_Expression

   88 Expression: REAL
   89           | Var
   90           | Var_Asgn
   91           | Func_Call
   92           | Var INCREMENT
   93           | Var DECREMENT
   94           | INCREMENT Var
   95           | DECREMENT Var
   96           | OPEN_PAR Expression CLOSE_PAR
   97           | Expression PLUS Expression
   98           | Expression MINUS Expression
   99           | Expression TIMES Expression
  100           | Expression DIVIDE Expression
  101           | Expression MODULO Expression
  102           | MINUS Expression

  103 Level_PP: %empty

  104 Level_MM: %empty

  105 Clear_Level: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
GTE (258) 77
LTE (259) 76
LT (260) 74
GT (261) 75
NEQ (262) 79
EQ (263) 78
ASGN (264) 18
AND (265) 73
OR (266) 72
NOT (267) 71
PLUS (268) 82 97
MINUS (269) 83 87 98 102
TIMES (270) 84 99
DIVIDE (271) 85 100
MODULO (272) 86 101
INCREMENT (273) 92 94
DECREMENT (274) 93 95
IF (275) 62 63
ELSE (276) 63
SWITCH (277) 64 65
CASE (278) 66 68
DEFAULT (279) 67 69
BREAK (280) 49
CONTINUE (281) 50
THEN (282)
WHILE (283) 55
FOR (284) 54
OPEN_PAR (285) 23 24 25 26 27 28 33 54 55 62 63 64 65 70 81 96
OPEN_CURLY (286) 53 64 65
CLOSE_PAR (287) 23 24 25 26 27 28 33 54 55 62 63 64 65 70 81 96
CLOSE_CURLY (288) 53 64 65
COMMA (289) 11 12 16 19 29 30 34
SEMI (290) 4 6 7 48 49 50 51 52 56 57 58 59
OPEN_BRAC (291) 16 21 22
CLOSE_BRAC (292) 16 21 22
COLON (293) 66 67 68 69
INT (294) 6 23 26 37 39
FLOAT (295) 7 24 27 38 40
VOID (296) 25 28
RETURN (297) 51
REAL <node> (298) 80 88
ID <node> (299) 15 16 17 23 24 25 26 27 28 33 39 40
ERROR (300)
END (301) 2
NEG (302)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
Input (49)
    on left: 1 2, on right: 0 1
Global_Statement (50)
    on left: 3 4 5, on right: 1
Var_Decl <node> (51)
    on left: 6 7, on right: 3 47
Data_Type_Flt (52)
    on left: 8, on right: 7 24 27
Data_Type_Int (53)
    on left: 9, on right: 6 23 26
Data_Type_None (54)
    on left: 10, on right: 6 7 23 24 26 27
Var_List <node> (55)
    on left: 11 12 13 14, on right: 6 7 11 12
Var <node> (56)
    on left: 15 16 17, on right: 11 13 18 65 89 92 93 94 95
Var_Asgn <node> (57)
    on left: 18, on right: 12 14 90
Dim_List <node> (58)
    on left: 19 20, on right: 16 19
Brac_Dim_List <node> (59)
    on left: 21 22, on right: 17 21
Func_Decl <node> (60)
    on left: 23 24 25 26 27 28, on right: 4 36
Decl_Param_List <node> (61)
    on left: 29 30 31 32, on right: 23 24 25 29 30
Func_Call <node> (62)
    on left: 33, on right: 91
Param_List <node> (63)
    on left: 34 35, on right: 33 34
Func_Defn <node> (64)
    on left: 36, on right: 5
Decl_Param <node> (65)
    on left: 37 38, on right: 29 31
Defn_Param <node> (66)
    on left: 39 40, on right: 30 32
Statements <node> (67)
    on left: 41 42, on right: 41 53 66 67 68 69
Statement <node> (68)
    on left: 43 44, on right: 41 42 54 55 62 63
Non_Conditional_Statement <node> (69)
    on left: 45 46 47 48 49 50 51 52, on right: 43
Block <node> (70)
    on left: 53, on right: 36 45
Loop_Block <node> (71)
    on left: 54 55, on right: 46
For_Control <node> (72)
    on left: 56 57, on right: 54
Init_Statement <node> (73)
    on left: 58 59, on right: 56 57
Conditional_Block <node> (74)
    on left: 60 61, on right: 44
If_Else_Block <node> (75)
    on left: 62 63, on right: 60
Switch_Block <node> (76)
    on left: 64 65, on right: 61
Switch_Body <node> (77)
    on left: 66 67 68 69, on right: 64 65 66 67
Condition <node> (78)
    on left: 70 71 72 73 74 75 76 77 78 79, on right: 55 56 62 63 70
    71 72 73
Constant_Expression <node> (79)
    on left: 80 81 82 83 84 85 86 87, on right: 64 66 68 81 82 83 84
    85 86 87
Expression <node> (80)
    on left: 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102, on right:
    16 18 19 20 21 22 34 35 48 51 56 57 58 74 75 76 77 78 79 96 97
    98 99 100 101 102
Level_PP (81)
    on left: 103, on right: 53 54 55 62 63 66 67 68 69
Level_MM (82)
    on left: 104, on right: 53 54 55 62 63 66 67 68 69
Clear_Level (83)
    on left: 105, on right: 53 54 55 62 63 66 67 68 69


State 0

    0 $accept: . Input $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3
    END    shift, and go to state 4

    Input             go to state 5
    Global_Statement  go to state 6
    Var_Decl          go to state 7
    Func_Decl         go to state 8
    Func_Defn         go to state 9


State 1

    6 Var_Decl: INT . Data_Type_Int Var_List SEMI Data_Type_None
   23 Func_Decl: INT . Data_Type_Int ID Data_Type_None OPEN_PAR Decl_Param_List CLOSE_PAR
   26          | INT . Data_Type_Int ID Data_Type_None OPEN_PAR CLOSE_PAR

    $default  reduce using rule 9 (Data_Type_Int)

    Data_Type_Int  go to state 10


State 2

    7 Var_Decl: FLOAT . Data_Type_Flt Var_List SEMI Data_Type_None
   24 Func_Decl: FLOAT . Data_Type_Flt ID Data_Type_None OPEN_PAR Decl_Param_List CLOSE_PAR
   27          | FLOAT . Data_Type_Flt ID Data_Type_None OPEN_PAR CLOSE_PAR

    $default  reduce using rule 8 (Data_Type_Flt)

    Data_Type_Flt  go to state 11


State 3

   25 Func_Decl: VOID . ID OPEN_PAR Decl_Param_List CLOSE_PAR
   28          | VOID . ID OPEN_PAR CLOSE_PAR

    ID  shift, and go to state 12


State 4

    2 Input: END .

    $default  reduce using rule 2 (Input)


State 5

    0 $accept: Input . $end

    $end  shift, and go to state 13


State 6

    1 Input: Global_Statement . Input

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3
    END    shift, and go to state 4

    Input             go to state 14
    Global_Statement  go to state 6
    Var_Decl          go to state 7
    Func_Decl         go to state 8
    Func_Defn         go to state 9


State 7

    3 Global_Statement: Var_Decl .

    $default  reduce using rule 3 (Global_Statement)


State 8

    4 Global_Statement: Func_Decl . SEMI
   36 Func_Defn: Func_Decl . Block

    OPEN_CURLY  shift, and go to state 15
    SEMI        shift, and go to state 16

    Block  go to state 17


State 9

    5 Global_Statement: Func_Defn .

    $default  reduce using rule 5 (Global_Statement)


State 10

    6 Var_Decl: INT Data_Type_Int . Var_List SEMI Data_Type_None
   23 Func_Decl: INT Data_Type_Int . ID Data_Type_None OPEN_PAR Decl_Param_List CLOSE_PAR
   26          | INT Data_Type_Int . ID Data_Type_None OPEN_PAR CLOSE_PAR

    ID  shift, and go to state 18

    Var_List  go to state 19
    Var       go to state 20
    Var_Asgn  go to state 21


State 11

    7 Var_Decl: FLOAT Data_Type_Flt . Var_List SEMI Data_Type_None
   24 Func_Decl: FLOAT Data_Type_Flt . ID Data_Type_None OPEN_PAR Decl_Param_List CLOSE_PAR
   27          | FLOAT Data_Type_Flt . ID Data_Type_None OPEN_PAR CLOSE_PAR

    ID  shift, and go to state 22

    Var_List  go to state 23
    Var       go to state 20
    Var_Asgn  go to state 21


State 12

   25 Func_Decl: VOID ID . OPEN_PAR Decl_Param_List CLOSE_PAR
   28          | VOID ID . OPEN_PAR CLOSE_PAR

    OPEN_PAR  shift, and go to state 24


State 13

    0 $accept: Input $end .

    $default  accept


State 14

    1 Input: Global_Statement Input .

    $default  reduce using rule 1 (Input)


State 15

   53 Block: OPEN_CURLY . Level_PP Statements Clear_Level Level_MM CLOSE_CURLY

    $default  reduce using rule 103 (Level_PP)

    Level_PP  go to state 25


State 16

    4 Global_Statement: Func_Decl SEMI .

    $default  reduce using rule 4 (Global_Statement)


State 17

   36 Func_Defn: Func_Decl Block .

    $default  reduce using rule 36 (Func_Defn)


State 18

   15 Var: ID .
   16    | ID . OPEN_BRAC Expression COMMA Dim_List CLOSE_BRAC
   17    | ID . Brac_Dim_List
   23 Func_Decl: INT Data_Type_Int ID . Data_Type_None OPEN_PAR Decl_Param_List CLOSE_PAR
   26          | INT Data_Type_Int ID . Data_Type_None OPEN_PAR CLOSE_PAR

    OPEN_BRAC  shift, and go to state 26

    OPEN_PAR  reduce using rule 10 (Data_Type_None)
    $default  reduce using rule 15 (Var)

    Data_Type_None  go to state 27
    Brac_Dim_List   go to state 28


State 19

    6 Var_Decl: INT Data_Type_Int Var_List . SEMI Data_Type_None

    SEMI  shift, and go to state 29


State 20

   11 Var_List: Var . COMMA Var_List
   13         | Var .
   18 Var_Asgn: Var . ASGN Expression

    ASGN   shift, and go to state 30
    COMMA  shift, and go to state 31

    $default  reduce using rule 13 (Var_List)


State 21

   12 Var_List: Var_Asgn . COMMA Var_List
   14         | Var_Asgn .

    COMMA  shift, and go to state 32

    $default  reduce using rule 14 (Var_List)


State 22

   15 Var: ID .
   16    | ID . OPEN_BRAC Expression COMMA Dim_List CLOSE_BRAC
   17    | ID . Brac_Dim_List
   24 Func_Decl: FLOAT Data_Type_Flt ID . Data_Type_None OPEN_PAR Decl_Param_List CLOSE_PAR
   27          | FLOAT Data_Type_Flt ID . Data_Type_None OPEN_PAR CLOSE_PAR

    OPEN_BRAC  shift, and go to state 26

    OPEN_PAR  reduce using rule 10 (Data_Type_None)
    $default  reduce using rule 15 (Var)

    Data_Type_None  go to state 33
    Brac_Dim_List   go to state 28


State 23

    7 Var_Decl: FLOAT Data_Type_Flt Var_List . SEMI Data_Type_None

    SEMI  shift, and go to state 34


State 24

   25 Func_Decl: VOID ID OPEN_PAR . Decl_Param_List CLOSE_PAR
   28          | VOID ID OPEN_PAR . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 35
    INT        shift, and go to state 36
    FLOAT      shift, and go to state 37

    Decl_Param_List  go to state 38
    Decl_Param       go to state 39
    Defn_Param       go to state 40


State 25

   53 Block: OPEN_CURLY Level_PP . Statements Clear_Level Level_MM CLOSE_CURLY

    MINUS       shift, and go to state 41
    INCREMENT   shift, and go to state 42
    DECREMENT   shift, and go to state 43
    IF          shift, and go to state 44
    SWITCH      shift, and go to state 45
    BREAK       shift, and go to state 46
    CONTINUE    shift, and go to state 47
    WHILE       shift, and go to state 48
    FOR         shift, and go to state 49
    OPEN_PAR    shift, and go to state 50
    OPEN_CURLY  shift, and go to state 15
    SEMI        shift, and go to state 51
    INT         shift, and go to state 52
    FLOAT       shift, and go to state 53
    RETURN      shift, and go to state 54
    REAL        shift, and go to state 55
    ID          shift, and go to state 56

    Var_Decl                   go to state 57
    Var                        go to state 58
    Var_Asgn                   go to state 59
    Func_Call                  go to state 60
    Statements                 go to state 61
    Statement                  go to state 62
    Non_Conditional_Statement  go to state 63
    Block                      go to state 64
    Loop_Block                 go to state 65
    Conditional_Block          go to state 66
    If_Else_Block              go to state 67
    Switch_Block               go to state 68
    Expression                 go to state 69


State 26

   16 Var: ID OPEN_BRAC . Expression COMMA Dim_List CLOSE_BRAC
   21 Brac_Dim_List: OPEN_BRAC . Expression CLOSE_BRAC Brac_Dim_List
   22              | OPEN_BRAC . Expression CLOSE_BRAC

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 70


State 27

   23 Func_Decl: INT Data_Type_Int ID Data_Type_None . OPEN_PAR Decl_Param_List CLOSE_PAR
   26          | INT Data_Type_Int ID Data_Type_None . OPEN_PAR CLOSE_PAR

    OPEN_PAR  shift, and go to state 71


State 28

   17 Var: ID Brac_Dim_List .

    $default  reduce using rule 17 (Var)


State 29

    6 Var_Decl: INT Data_Type_Int Var_List SEMI . Data_Type_None

    $default  reduce using rule 10 (Data_Type_None)

    Data_Type_None  go to state 72


State 30

   18 Var_Asgn: Var ASGN . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 73


State 31

   11 Var_List: Var COMMA . Var_List

    ID  shift, and go to state 74

    Var_List  go to state 75
    Var       go to state 20
    Var_Asgn  go to state 21


State 32

   12 Var_List: Var_Asgn COMMA . Var_List

    ID  shift, and go to state 74

    Var_List  go to state 76
    Var       go to state 20
    Var_Asgn  go to state 21


State 33

   24 Func_Decl: FLOAT Data_Type_Flt ID Data_Type_None . OPEN_PAR Decl_Param_List CLOSE_PAR
   27          | FLOAT Data_Type_Flt ID Data_Type_None . OPEN_PAR CLOSE_PAR

    OPEN_PAR  shift, and go to state 77


State 34

    7 Var_Decl: FLOAT Data_Type_Flt Var_List SEMI . Data_Type_None

    $default  reduce using rule 10 (Data_Type_None)

    Data_Type_None  go to state 78


State 35

   28 Func_Decl: VOID ID OPEN_PAR CLOSE_PAR .

    $default  reduce using rule 28 (Func_Decl)


State 36

   37 Decl_Param: INT .
   39 Defn_Param: INT . ID

    ID  shift, and go to state 79

    $default  reduce using rule 37 (Decl_Param)


State 37

   38 Decl_Param: FLOAT .
   40 Defn_Param: FLOAT . ID

    ID  shift, and go to state 80

    $default  reduce using rule 38 (Decl_Param)


State 38

   25 Func_Decl: VOID ID OPEN_PAR Decl_Param_List . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 81


State 39

   29 Decl_Param_List: Decl_Param . COMMA Decl_Param_List
   31                | Decl_Param .

    COMMA  shift, and go to state 82

    $default  reduce using rule 31 (Decl_Param_List)


State 40

   30 Decl_Param_List: Defn_Param . COMMA Decl_Param_List
   32                | Defn_Param .

    COMMA  shift, and go to state 83

    $default  reduce using rule 32 (Decl_Param_List)


State 41

  102 Expression: MINUS . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 84


State 42

   94 Expression: INCREMENT . Var

    ID  shift, and go to state 74

    Var  go to state 85


State 43

   95 Expression: DECREMENT . Var

    ID  shift, and go to state 74

    Var  go to state 86


State 44

   62 If_Else_Block: IF . OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM
   63              | IF . OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM ELSE Level_PP Statement Clear_Level Level_MM

    OPEN_PAR  shift, and go to state 87


State 45

   64 Switch_Block: SWITCH . OPEN_PAR Constant_Expression CLOSE_PAR OPEN_CURLY Switch_Body CLOSE_CURLY
   65             | SWITCH . OPEN_PAR Var CLOSE_PAR OPEN_CURLY Switch_Body CLOSE_CURLY

    OPEN_PAR  shift, and go to state 88


State 46

   49 Non_Conditional_Statement: BREAK . SEMI

    SEMI  shift, and go to state 89


State 47

   50 Non_Conditional_Statement: CONTINUE . SEMI

    SEMI  shift, and go to state 90


State 48

   55 Loop_Block: WHILE . OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM

    OPEN_PAR  shift, and go to state 91


State 49

   54 Loop_Block: FOR . OPEN_PAR For_Control CLOSE_PAR Level_PP Statement Clear_Level Level_MM

    OPEN_PAR  shift, and go to state 92


State 50

   96 Expression: OPEN_PAR . Expression CLOSE_PAR

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 93


State 51

   52 Non_Conditional_Statement: SEMI .

    $default  reduce using rule 52 (Non_Conditional_Statement)


State 52

    6 Var_Decl: INT . Data_Type_Int Var_List SEMI Data_Type_None

    $default  reduce using rule 9 (Data_Type_Int)

    Data_Type_Int  go to state 94


State 53

    7 Var_Decl: FLOAT . Data_Type_Flt Var_List SEMI Data_Type_None

    $default  reduce using rule 8 (Data_Type_Flt)

    Data_Type_Flt  go to state 95


State 54

   51 Non_Conditional_Statement: RETURN . Expression SEMI

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 96


State 55

   88 Expression: REAL .

    $default  reduce using rule 88 (Expression)


State 56

   15 Var: ID .
   16    | ID . OPEN_BRAC Expression COMMA Dim_List CLOSE_BRAC
   17    | ID . Brac_Dim_List
   33 Func_Call: ID . OPEN_PAR Param_List CLOSE_PAR

    OPEN_PAR   shift, and go to state 97
    OPEN_BRAC  shift, and go to state 26

    $default  reduce using rule 15 (Var)

    Brac_Dim_List  go to state 28


State 57

   47 Non_Conditional_Statement: Var_Decl .

    $default  reduce using rule 47 (Non_Conditional_Statement)


State 58

   18 Var_Asgn: Var . ASGN Expression
   89 Expression: Var .
   92           | Var . INCREMENT
   93           | Var . DECREMENT

    ASGN       shift, and go to state 30
    INCREMENT  shift, and go to state 98
    DECREMENT  shift, and go to state 99

    $default  reduce using rule 89 (Expression)


State 59

   90 Expression: Var_Asgn .

    $default  reduce using rule 90 (Expression)


State 60

   91 Expression: Func_Call .

    $default  reduce using rule 91 (Expression)


State 61

   53 Block: OPEN_CURLY Level_PP Statements . Clear_Level Level_MM CLOSE_CURLY

    $default  reduce using rule 105 (Clear_Level)

    Clear_Level  go to state 100


State 62

   41 Statements: Statement . Statements
   42           | Statement .

    MINUS       shift, and go to state 41
    INCREMENT   shift, and go to state 42
    DECREMENT   shift, and go to state 43
    IF          shift, and go to state 44
    SWITCH      shift, and go to state 45
    BREAK       shift, and go to state 46
    CONTINUE    shift, and go to state 47
    WHILE       shift, and go to state 48
    FOR         shift, and go to state 49
    OPEN_PAR    shift, and go to state 50
    OPEN_CURLY  shift, and go to state 15
    SEMI        shift, and go to state 51
    INT         shift, and go to state 52
    FLOAT       shift, and go to state 53
    RETURN      shift, and go to state 54
    REAL        shift, and go to state 55
    ID          shift, and go to state 56

    $default  reduce using rule 42 (Statements)

    Var_Decl                   go to state 57
    Var                        go to state 58
    Var_Asgn                   go to state 59
    Func_Call                  go to state 60
    Statements                 go to state 101
    Statement                  go to state 62
    Non_Conditional_Statement  go to state 63
    Block                      go to state 64
    Loop_Block                 go to state 65
    Conditional_Block          go to state 66
    If_Else_Block              go to state 67
    Switch_Block               go to state 68
    Expression                 go to state 69


State 63

   43 Statement: Non_Conditional_Statement .

    $default  reduce using rule 43 (Statement)


State 64

   45 Non_Conditional_Statement: Block .

    $default  reduce using rule 45 (Non_Conditional_Statement)


State 65

   46 Non_Conditional_Statement: Loop_Block .

    $default  reduce using rule 46 (Non_Conditional_Statement)


State 66

   44 Statement: Conditional_Block .

    $default  reduce using rule 44 (Statement)


State 67

   60 Conditional_Block: If_Else_Block .

    $default  reduce using rule 60 (Conditional_Block)


State 68

   61 Conditional_Block: Switch_Block .

    $default  reduce using rule 61 (Conditional_Block)


State 69

   48 Non_Conditional_Statement: Expression . SEMI
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106
    SEMI    shift, and go to state 107


State 70

   16 Var: ID OPEN_BRAC Expression . COMMA Dim_List CLOSE_BRAC
   21 Brac_Dim_List: OPEN_BRAC Expression . CLOSE_BRAC Brac_Dim_List
   22              | OPEN_BRAC Expression . CLOSE_BRAC
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS        shift, and go to state 102
    MINUS       shift, and go to state 103
    TIMES       shift, and go to state 104
    DIVIDE      shift, and go to state 105
    MODULO      shift, and go to state 106
    COMMA       shift, and go to state 108
    CLOSE_BRAC  shift, and go to state 109


State 71

   23 Func_Decl: INT Data_Type_Int ID Data_Type_None OPEN_PAR . Decl_Param_List CLOSE_PAR
   26          | INT Data_Type_Int ID Data_Type_None OPEN_PAR . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 110
    INT        shift, and go to state 36
    FLOAT      shift, and go to state 37

    Decl_Param_List  go to state 111
    Decl_Param       go to state 39
    Defn_Param       go to state 40


State 72

    6 Var_Decl: INT Data_Type_Int Var_List SEMI Data_Type_None .

    $default  reduce using rule 6 (Var_Decl)


State 73

   18 Var_Asgn: Var ASGN Expression .
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 18 (Var_Asgn)


State 74

   15 Var: ID .
   16    | ID . OPEN_BRAC Expression COMMA Dim_List CLOSE_BRAC
   17    | ID . Brac_Dim_List

    OPEN_BRAC  shift, and go to state 26

    $default  reduce using rule 15 (Var)

    Brac_Dim_List  go to state 28


State 75

   11 Var_List: Var COMMA Var_List .

    $default  reduce using rule 11 (Var_List)


State 76

   12 Var_List: Var_Asgn COMMA Var_List .

    $default  reduce using rule 12 (Var_List)


State 77

   24 Func_Decl: FLOAT Data_Type_Flt ID Data_Type_None OPEN_PAR . Decl_Param_List CLOSE_PAR
   27          | FLOAT Data_Type_Flt ID Data_Type_None OPEN_PAR . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 112
    INT        shift, and go to state 36
    FLOAT      shift, and go to state 37

    Decl_Param_List  go to state 113
    Decl_Param       go to state 39
    Defn_Param       go to state 40


State 78

    7 Var_Decl: FLOAT Data_Type_Flt Var_List SEMI Data_Type_None .

    $default  reduce using rule 7 (Var_Decl)


State 79

   39 Defn_Param: INT ID .

    $default  reduce using rule 39 (Defn_Param)


State 80

   40 Defn_Param: FLOAT ID .

    $default  reduce using rule 40 (Defn_Param)


State 81

   25 Func_Decl: VOID ID OPEN_PAR Decl_Param_List CLOSE_PAR .

    $default  reduce using rule 25 (Func_Decl)


State 82

   29 Decl_Param_List: Decl_Param COMMA . Decl_Param_List

    INT    shift, and go to state 36
    FLOAT  shift, and go to state 37

    Decl_Param_List  go to state 114
    Decl_Param       go to state 39
    Defn_Param       go to state 40


State 83

   30 Decl_Param_List: Defn_Param COMMA . Decl_Param_List

    INT    shift, and go to state 36
    FLOAT  shift, and go to state 37

    Decl_Param_List  go to state 115
    Decl_Param       go to state 39
    Defn_Param       go to state 40


State 84

   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression
  102           | MINUS Expression .

    $default  reduce using rule 102 (Expression)


State 85

   94 Expression: INCREMENT Var .

    $default  reduce using rule 94 (Expression)


State 86

   95 Expression: DECREMENT Var .

    $default  reduce using rule 95 (Expression)


State 87

   62 If_Else_Block: IF OPEN_PAR . Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM
   63              | IF OPEN_PAR . Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM ELSE Level_PP Statement Clear_Level Level_MM

    NOT        shift, and go to state 116
    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 117
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Condition   go to state 118
    Expression  go to state 119


State 88

   64 Switch_Block: SWITCH OPEN_PAR . Constant_Expression CLOSE_PAR OPEN_CURLY Switch_Body CLOSE_CURLY
   65             | SWITCH OPEN_PAR . Var CLOSE_PAR OPEN_CURLY Switch_Body CLOSE_CURLY

    MINUS     shift, and go to state 120
    OPEN_PAR  shift, and go to state 121
    REAL      shift, and go to state 122
    ID        shift, and go to state 74

    Var                  go to state 123
    Constant_Expression  go to state 124


State 89

   49 Non_Conditional_Statement: BREAK SEMI .

    $default  reduce using rule 49 (Non_Conditional_Statement)


State 90

   50 Non_Conditional_Statement: CONTINUE SEMI .

    $default  reduce using rule 50 (Non_Conditional_Statement)


State 91

   55 Loop_Block: WHILE OPEN_PAR . Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM

    NOT        shift, and go to state 116
    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 117
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Condition   go to state 125
    Expression  go to state 119


State 92

   54 Loop_Block: FOR OPEN_PAR . For_Control CLOSE_PAR Level_PP Statement Clear_Level Level_MM

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    SEMI       shift, and go to state 126
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var             go to state 58
    Var_Asgn        go to state 59
    Func_Call       go to state 60
    For_Control     go to state 127
    Init_Statement  go to state 128
    Expression      go to state 129


State 93

   96 Expression: OPEN_PAR Expression . CLOSE_PAR
   97           | Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS       shift, and go to state 102
    MINUS      shift, and go to state 103
    TIMES      shift, and go to state 104
    DIVIDE     shift, and go to state 105
    MODULO     shift, and go to state 106
    CLOSE_PAR  shift, and go to state 130


State 94

    6 Var_Decl: INT Data_Type_Int . Var_List SEMI Data_Type_None

    ID  shift, and go to state 74

    Var_List  go to state 19
    Var       go to state 20
    Var_Asgn  go to state 21


State 95

    7 Var_Decl: FLOAT Data_Type_Flt . Var_List SEMI Data_Type_None

    ID  shift, and go to state 74

    Var_List  go to state 23
    Var       go to state 20
    Var_Asgn  go to state 21


State 96

   51 Non_Conditional_Statement: RETURN Expression . SEMI
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106
    SEMI    shift, and go to state 131


State 97

   33 Func_Call: ID OPEN_PAR . Param_List CLOSE_PAR

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Param_List  go to state 132
    Expression  go to state 133


State 98

   92 Expression: Var INCREMENT .

    $default  reduce using rule 92 (Expression)


State 99

   93 Expression: Var DECREMENT .

    $default  reduce using rule 93 (Expression)


State 100

   53 Block: OPEN_CURLY Level_PP Statements Clear_Level . Level_MM CLOSE_CURLY

    $default  reduce using rule 104 (Level_MM)

    Level_MM  go to state 134


State 101

   41 Statements: Statement Statements .

    $default  reduce using rule 41 (Statements)


State 102

   97 Expression: Expression PLUS . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 135


State 103

   98 Expression: Expression MINUS . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 136


State 104

   99 Expression: Expression TIMES . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 137


State 105

  100 Expression: Expression DIVIDE . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 138


State 106

  101 Expression: Expression MODULO . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 139


State 107

   48 Non_Conditional_Statement: Expression SEMI .

    $default  reduce using rule 48 (Non_Conditional_Statement)


State 108

   16 Var: ID OPEN_BRAC Expression COMMA . Dim_List CLOSE_BRAC

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Dim_List    go to state 140
    Func_Call   go to state 60
    Expression  go to state 141


State 109

   21 Brac_Dim_List: OPEN_BRAC Expression CLOSE_BRAC . Brac_Dim_List
   22              | OPEN_BRAC Expression CLOSE_BRAC .

    OPEN_BRAC  shift, and go to state 142

    $default  reduce using rule 22 (Brac_Dim_List)

    Brac_Dim_List  go to state 143


State 110

   26 Func_Decl: INT Data_Type_Int ID Data_Type_None OPEN_PAR CLOSE_PAR .

    $default  reduce using rule 26 (Func_Decl)


State 111

   23 Func_Decl: INT Data_Type_Int ID Data_Type_None OPEN_PAR Decl_Param_List . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 144


State 112

   27 Func_Decl: FLOAT Data_Type_Flt ID Data_Type_None OPEN_PAR CLOSE_PAR .

    $default  reduce using rule 27 (Func_Decl)


State 113

   24 Func_Decl: FLOAT Data_Type_Flt ID Data_Type_None OPEN_PAR Decl_Param_List . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 145


State 114

   29 Decl_Param_List: Decl_Param COMMA Decl_Param_List .

    $default  reduce using rule 29 (Decl_Param_List)


State 115

   30 Decl_Param_List: Defn_Param COMMA Decl_Param_List .

    $default  reduce using rule 30 (Decl_Param_List)


State 116

   71 Condition: NOT . Condition

    NOT        shift, and go to state 116
    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 117
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Condition   go to state 146
    Expression  go to state 119


State 117

   70 Condition: OPEN_PAR . Condition CLOSE_PAR
   96 Expression: OPEN_PAR . Expression CLOSE_PAR

    NOT        shift, and go to state 116
    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 117
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Condition   go to state 147
    Expression  go to state 148


State 118

   62 If_Else_Block: IF OPEN_PAR Condition . CLOSE_PAR Level_PP Statement Clear_Level Level_MM
   63              | IF OPEN_PAR Condition . CLOSE_PAR Level_PP Statement Clear_Level Level_MM ELSE Level_PP Statement Clear_Level Level_MM
   72 Condition: Condition . OR Condition
   73          | Condition . AND Condition

    AND        shift, and go to state 149
    OR         shift, and go to state 150
    CLOSE_PAR  shift, and go to state 151


State 119

   74 Condition: Expression . LT Expression
   75          | Expression . GT Expression
   76          | Expression . LTE Expression
   77          | Expression . GTE Expression
   78          | Expression . EQ Expression
   79          | Expression . NEQ Expression
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    GTE     shift, and go to state 152
    LTE     shift, and go to state 153
    LT      shift, and go to state 154
    GT      shift, and go to state 155
    NEQ     shift, and go to state 156
    EQ      shift, and go to state 157
    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106


State 120

   87 Constant_Expression: MINUS . Constant_Expression

    MINUS     shift, and go to state 120
    OPEN_PAR  shift, and go to state 121
    REAL      shift, and go to state 122

    Constant_Expression  go to state 158


State 121

   81 Constant_Expression: OPEN_PAR . Constant_Expression CLOSE_PAR

    MINUS     shift, and go to state 120
    OPEN_PAR  shift, and go to state 121
    REAL      shift, and go to state 122

    Constant_Expression  go to state 159


State 122

   80 Constant_Expression: REAL .

    $default  reduce using rule 80 (Constant_Expression)


State 123

   65 Switch_Block: SWITCH OPEN_PAR Var . CLOSE_PAR OPEN_CURLY Switch_Body CLOSE_CURLY

    CLOSE_PAR  shift, and go to state 160


State 124

   64 Switch_Block: SWITCH OPEN_PAR Constant_Expression . CLOSE_PAR OPEN_CURLY Switch_Body CLOSE_CURLY
   82 Constant_Expression: Constant_Expression . PLUS Constant_Expression
   83                    | Constant_Expression . MINUS Constant_Expression
   84                    | Constant_Expression . TIMES Constant_Expression
   85                    | Constant_Expression . DIVIDE Constant_Expression
   86                    | Constant_Expression . MODULO Constant_Expression

    PLUS       shift, and go to state 161
    MINUS      shift, and go to state 162
    TIMES      shift, and go to state 163
    DIVIDE     shift, and go to state 164
    MODULO     shift, and go to state 165
    CLOSE_PAR  shift, and go to state 166


State 125

   55 Loop_Block: WHILE OPEN_PAR Condition . CLOSE_PAR Level_PP Statement Clear_Level Level_MM
   72 Condition: Condition . OR Condition
   73          | Condition . AND Condition

    AND        shift, and go to state 149
    OR         shift, and go to state 150
    CLOSE_PAR  shift, and go to state 167


State 126

   59 Init_Statement: SEMI .

    $default  reduce using rule 59 (Init_Statement)


State 127

   54 Loop_Block: FOR OPEN_PAR For_Control . CLOSE_PAR Level_PP Statement Clear_Level Level_MM

    CLOSE_PAR  shift, and go to state 168


State 128

   56 For_Control: Init_Statement . Condition SEMI Expression
   57            | Init_Statement . SEMI Expression

    NOT        shift, and go to state 116
    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 117
    SEMI       shift, and go to state 169
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Condition   go to state 170
    Expression  go to state 119


State 129

   58 Init_Statement: Expression . SEMI
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106
    SEMI    shift, and go to state 171


State 130

   96 Expression: OPEN_PAR Expression CLOSE_PAR .

    $default  reduce using rule 96 (Expression)


State 131

   51 Non_Conditional_Statement: RETURN Expression SEMI .

    $default  reduce using rule 51 (Non_Conditional_Statement)


State 132

   33 Func_Call: ID OPEN_PAR Param_List . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 172


State 133

   34 Param_List: Expression . COMMA Param_List
   35           | Expression .
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106
    COMMA   shift, and go to state 173

    $default  reduce using rule 35 (Param_List)


State 134

   53 Block: OPEN_CURLY Level_PP Statements Clear_Level Level_MM . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 174


State 135

   97 Expression: Expression . PLUS Expression
   97           | Expression PLUS Expression .
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 97 (Expression)


State 136

   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   98           | Expression MINUS Expression .
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 98 (Expression)


State 137

   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
   99           | Expression TIMES Expression .
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 99 (Expression)


State 138

   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  100           | Expression DIVIDE Expression .
  101           | Expression . MODULO Expression

    $default  reduce using rule 100 (Expression)


State 139

   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression
  101           | Expression MODULO Expression .

    $default  reduce using rule 101 (Expression)


State 140

   16 Var: ID OPEN_BRAC Expression COMMA Dim_List . CLOSE_BRAC

    CLOSE_BRAC  shift, and go to state 175


State 141

   19 Dim_List: Expression . COMMA Dim_List
   20         | Expression .
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106
    COMMA   shift, and go to state 176

    $default  reduce using rule 20 (Dim_List)


State 142

   21 Brac_Dim_List: OPEN_BRAC . Expression CLOSE_BRAC Brac_Dim_List
   22              | OPEN_BRAC . Expression CLOSE_BRAC

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 177


State 143

   21 Brac_Dim_List: OPEN_BRAC Expression CLOSE_BRAC Brac_Dim_List .

    $default  reduce using rule 21 (Brac_Dim_List)


State 144

   23 Func_Decl: INT Data_Type_Int ID Data_Type_None OPEN_PAR Decl_Param_List CLOSE_PAR .

    $default  reduce using rule 23 (Func_Decl)


State 145

   24 Func_Decl: FLOAT Data_Type_Flt ID Data_Type_None OPEN_PAR Decl_Param_List CLOSE_PAR .

    $default  reduce using rule 24 (Func_Decl)


State 146

   71 Condition: NOT Condition .
   72          | Condition . OR Condition
   73          | Condition . AND Condition

    $default  reduce using rule 71 (Condition)


State 147

   70 Condition: OPEN_PAR Condition . CLOSE_PAR
   72          | Condition . OR Condition
   73          | Condition . AND Condition

    AND        shift, and go to state 149
    OR         shift, and go to state 150
    CLOSE_PAR  shift, and go to state 178


State 148

   74 Condition: Expression . LT Expression
   75          | Expression . GT Expression
   76          | Expression . LTE Expression
   77          | Expression . GTE Expression
   78          | Expression . EQ Expression
   79          | Expression . NEQ Expression
   96 Expression: OPEN_PAR Expression . CLOSE_PAR
   97           | Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    GTE        shift, and go to state 152
    LTE        shift, and go to state 153
    LT         shift, and go to state 154
    GT         shift, and go to state 155
    NEQ        shift, and go to state 156
    EQ         shift, and go to state 157
    PLUS       shift, and go to state 102
    MINUS      shift, and go to state 103
    TIMES      shift, and go to state 104
    DIVIDE     shift, and go to state 105
    MODULO     shift, and go to state 106
    CLOSE_PAR  shift, and go to state 130


State 149

   73 Condition: Condition AND . Condition

    NOT        shift, and go to state 116
    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 117
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Condition   go to state 179
    Expression  go to state 119


State 150

   72 Condition: Condition OR . Condition

    NOT        shift, and go to state 116
    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 117
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Condition   go to state 180
    Expression  go to state 119


State 151

   62 If_Else_Block: IF OPEN_PAR Condition CLOSE_PAR . Level_PP Statement Clear_Level Level_MM
   63              | IF OPEN_PAR Condition CLOSE_PAR . Level_PP Statement Clear_Level Level_MM ELSE Level_PP Statement Clear_Level Level_MM

    $default  reduce using rule 103 (Level_PP)

    Level_PP  go to state 181


State 152

   77 Condition: Expression GTE . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 182


State 153

   76 Condition: Expression LTE . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 183


State 154

   74 Condition: Expression LT . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 184


State 155

   75 Condition: Expression GT . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 185


State 156

   79 Condition: Expression NEQ . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 186


State 157

   78 Condition: Expression EQ . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 187


State 158

   82 Constant_Expression: Constant_Expression . PLUS Constant_Expression
   83                    | Constant_Expression . MINUS Constant_Expression
   84                    | Constant_Expression . TIMES Constant_Expression
   85                    | Constant_Expression . DIVIDE Constant_Expression
   86                    | Constant_Expression . MODULO Constant_Expression
   87                    | MINUS Constant_Expression .

    $default  reduce using rule 87 (Constant_Expression)


State 159

   81 Constant_Expression: OPEN_PAR Constant_Expression . CLOSE_PAR
   82                    | Constant_Expression . PLUS Constant_Expression
   83                    | Constant_Expression . MINUS Constant_Expression
   84                    | Constant_Expression . TIMES Constant_Expression
   85                    | Constant_Expression . DIVIDE Constant_Expression
   86                    | Constant_Expression . MODULO Constant_Expression

    PLUS       shift, and go to state 161
    MINUS      shift, and go to state 162
    TIMES      shift, and go to state 163
    DIVIDE     shift, and go to state 164
    MODULO     shift, and go to state 165
    CLOSE_PAR  shift, and go to state 188


State 160

   65 Switch_Block: SWITCH OPEN_PAR Var CLOSE_PAR . OPEN_CURLY Switch_Body CLOSE_CURLY

    OPEN_CURLY  shift, and go to state 189


State 161

   82 Constant_Expression: Constant_Expression PLUS . Constant_Expression

    MINUS     shift, and go to state 120
    OPEN_PAR  shift, and go to state 121
    REAL      shift, and go to state 122

    Constant_Expression  go to state 190


State 162

   83 Constant_Expression: Constant_Expression MINUS . Constant_Expression

    MINUS     shift, and go to state 120
    OPEN_PAR  shift, and go to state 121
    REAL      shift, and go to state 122

    Constant_Expression  go to state 191


State 163

   84 Constant_Expression: Constant_Expression TIMES . Constant_Expression

    MINUS     shift, and go to state 120
    OPEN_PAR  shift, and go to state 121
    REAL      shift, and go to state 122

    Constant_Expression  go to state 192


State 164

   85 Constant_Expression: Constant_Expression DIVIDE . Constant_Expression

    MINUS     shift, and go to state 120
    OPEN_PAR  shift, and go to state 121
    REAL      shift, and go to state 122

    Constant_Expression  go to state 193


State 165

   86 Constant_Expression: Constant_Expression MODULO . Constant_Expression

    MINUS     shift, and go to state 120
    OPEN_PAR  shift, and go to state 121
    REAL      shift, and go to state 122

    Constant_Expression  go to state 194


State 166

   64 Switch_Block: SWITCH OPEN_PAR Constant_Expression CLOSE_PAR . OPEN_CURLY Switch_Body CLOSE_CURLY

    OPEN_CURLY  shift, and go to state 195


State 167

   55 Loop_Block: WHILE OPEN_PAR Condition CLOSE_PAR . Level_PP Statement Clear_Level Level_MM

    $default  reduce using rule 103 (Level_PP)

    Level_PP  go to state 196


State 168

   54 Loop_Block: FOR OPEN_PAR For_Control CLOSE_PAR . Level_PP Statement Clear_Level Level_MM

    $default  reduce using rule 103 (Level_PP)

    Level_PP  go to state 197


State 169

   57 For_Control: Init_Statement SEMI . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 198


State 170

   56 For_Control: Init_Statement Condition . SEMI Expression
   72 Condition: Condition . OR Condition
   73          | Condition . AND Condition

    AND   shift, and go to state 149
    OR    shift, and go to state 150
    SEMI  shift, and go to state 199


State 171

   58 Init_Statement: Expression SEMI .

    $default  reduce using rule 58 (Init_Statement)


State 172

   33 Func_Call: ID OPEN_PAR Param_List CLOSE_PAR .

    $default  reduce using rule 33 (Func_Call)


State 173

   34 Param_List: Expression COMMA . Param_List

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Param_List  go to state 200
    Expression  go to state 133


State 174

   53 Block: OPEN_CURLY Level_PP Statements Clear_Level Level_MM CLOSE_CURLY .

    $default  reduce using rule 53 (Block)


State 175

   16 Var: ID OPEN_BRAC Expression COMMA Dim_List CLOSE_BRAC .

    $default  reduce using rule 16 (Var)


State 176

   19 Dim_List: Expression COMMA . Dim_List

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Dim_List    go to state 201
    Func_Call   go to state 60
    Expression  go to state 141


State 177

   21 Brac_Dim_List: OPEN_BRAC Expression . CLOSE_BRAC Brac_Dim_List
   22              | OPEN_BRAC Expression . CLOSE_BRAC
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS        shift, and go to state 102
    MINUS       shift, and go to state 103
    TIMES       shift, and go to state 104
    DIVIDE      shift, and go to state 105
    MODULO      shift, and go to state 106
    CLOSE_BRAC  shift, and go to state 109


State 178

   70 Condition: OPEN_PAR Condition CLOSE_PAR .

    $default  reduce using rule 70 (Condition)


State 179

   72 Condition: Condition . OR Condition
   73          | Condition . AND Condition
   73          | Condition AND Condition .

    AND  shift, and go to state 149
    OR   shift, and go to state 150

    $default  reduce using rule 73 (Condition)


State 180

   72 Condition: Condition . OR Condition
   72          | Condition OR Condition .
   73          | Condition . AND Condition

    AND  shift, and go to state 149
    OR   shift, and go to state 150

    $default  reduce using rule 72 (Condition)


State 181

   62 If_Else_Block: IF OPEN_PAR Condition CLOSE_PAR Level_PP . Statement Clear_Level Level_MM
   63              | IF OPEN_PAR Condition CLOSE_PAR Level_PP . Statement Clear_Level Level_MM ELSE Level_PP Statement Clear_Level Level_MM

    MINUS       shift, and go to state 41
    INCREMENT   shift, and go to state 42
    DECREMENT   shift, and go to state 43
    IF          shift, and go to state 44
    SWITCH      shift, and go to state 45
    BREAK       shift, and go to state 46
    CONTINUE    shift, and go to state 47
    WHILE       shift, and go to state 48
    FOR         shift, and go to state 49
    OPEN_PAR    shift, and go to state 50
    OPEN_CURLY  shift, and go to state 15
    SEMI        shift, and go to state 51
    INT         shift, and go to state 52
    FLOAT       shift, and go to state 53
    RETURN      shift, and go to state 54
    REAL        shift, and go to state 55
    ID          shift, and go to state 56

    Var_Decl                   go to state 57
    Var                        go to state 58
    Var_Asgn                   go to state 59
    Func_Call                  go to state 60
    Statement                  go to state 202
    Non_Conditional_Statement  go to state 63
    Block                      go to state 64
    Loop_Block                 go to state 65
    Conditional_Block          go to state 66
    If_Else_Block              go to state 67
    Switch_Block               go to state 68
    Expression                 go to state 69


State 182

   77 Condition: Expression GTE Expression .
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 77 (Condition)


State 183

   76 Condition: Expression LTE Expression .
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 76 (Condition)


State 184

   74 Condition: Expression LT Expression .
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 74 (Condition)


State 185

   75 Condition: Expression GT Expression .
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 75 (Condition)


State 186

   79 Condition: Expression NEQ Expression .
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 79 (Condition)


State 187

   78 Condition: Expression EQ Expression .
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 78 (Condition)


State 188

   81 Constant_Expression: OPEN_PAR Constant_Expression CLOSE_PAR .

    $default  reduce using rule 81 (Constant_Expression)


State 189

   65 Switch_Block: SWITCH OPEN_PAR Var CLOSE_PAR OPEN_CURLY . Switch_Body CLOSE_CURLY

    CASE     shift, and go to state 203
    DEFAULT  shift, and go to state 204

    Switch_Body  go to state 205


State 190

   82 Constant_Expression: Constant_Expression . PLUS Constant_Expression
   82                    | Constant_Expression PLUS Constant_Expression .
   83                    | Constant_Expression . MINUS Constant_Expression
   84                    | Constant_Expression . TIMES Constant_Expression
   85                    | Constant_Expression . DIVIDE Constant_Expression
   86                    | Constant_Expression . MODULO Constant_Expression

    TIMES   shift, and go to state 163
    DIVIDE  shift, and go to state 164
    MODULO  shift, and go to state 165

    $default  reduce using rule 82 (Constant_Expression)


State 191

   82 Constant_Expression: Constant_Expression . PLUS Constant_Expression
   83                    | Constant_Expression . MINUS Constant_Expression
   83                    | Constant_Expression MINUS Constant_Expression .
   84                    | Constant_Expression . TIMES Constant_Expression
   85                    | Constant_Expression . DIVIDE Constant_Expression
   86                    | Constant_Expression . MODULO Constant_Expression

    PLUS    shift, and go to state 161
    TIMES   shift, and go to state 163
    DIVIDE  shift, and go to state 164
    MODULO  shift, and go to state 165

    $default  reduce using rule 83 (Constant_Expression)


State 192

   82 Constant_Expression: Constant_Expression . PLUS Constant_Expression
   83                    | Constant_Expression . MINUS Constant_Expression
   84                    | Constant_Expression . TIMES Constant_Expression
   84                    | Constant_Expression TIMES Constant_Expression .
   85                    | Constant_Expression . DIVIDE Constant_Expression
   86                    | Constant_Expression . MODULO Constant_Expression

    DIVIDE  shift, and go to state 164
    MODULO  shift, and go to state 165

    $default  reduce using rule 84 (Constant_Expression)


State 193

   82 Constant_Expression: Constant_Expression . PLUS Constant_Expression
   83                    | Constant_Expression . MINUS Constant_Expression
   84                    | Constant_Expression . TIMES Constant_Expression
   85                    | Constant_Expression . DIVIDE Constant_Expression
   85                    | Constant_Expression DIVIDE Constant_Expression .
   86                    | Constant_Expression . MODULO Constant_Expression

    $default  reduce using rule 85 (Constant_Expression)


State 194

   82 Constant_Expression: Constant_Expression . PLUS Constant_Expression
   83                    | Constant_Expression . MINUS Constant_Expression
   84                    | Constant_Expression . TIMES Constant_Expression
   85                    | Constant_Expression . DIVIDE Constant_Expression
   86                    | Constant_Expression . MODULO Constant_Expression
   86                    | Constant_Expression MODULO Constant_Expression .

    $default  reduce using rule 86 (Constant_Expression)


State 195

   64 Switch_Block: SWITCH OPEN_PAR Constant_Expression CLOSE_PAR OPEN_CURLY . Switch_Body CLOSE_CURLY

    CASE     shift, and go to state 203
    DEFAULT  shift, and go to state 204

    Switch_Body  go to state 206


State 196

   55 Loop_Block: WHILE OPEN_PAR Condition CLOSE_PAR Level_PP . Statement Clear_Level Level_MM

    MINUS       shift, and go to state 41
    INCREMENT   shift, and go to state 42
    DECREMENT   shift, and go to state 43
    IF          shift, and go to state 44
    SWITCH      shift, and go to state 45
    BREAK       shift, and go to state 46
    CONTINUE    shift, and go to state 47
    WHILE       shift, and go to state 48
    FOR         shift, and go to state 49
    OPEN_PAR    shift, and go to state 50
    OPEN_CURLY  shift, and go to state 15
    SEMI        shift, and go to state 51
    INT         shift, and go to state 52
    FLOAT       shift, and go to state 53
    RETURN      shift, and go to state 54
    REAL        shift, and go to state 55
    ID          shift, and go to state 56

    Var_Decl                   go to state 57
    Var                        go to state 58
    Var_Asgn                   go to state 59
    Func_Call                  go to state 60
    Statement                  go to state 207
    Non_Conditional_Statement  go to state 63
    Block                      go to state 64
    Loop_Block                 go to state 65
    Conditional_Block          go to state 66
    If_Else_Block              go to state 67
    Switch_Block               go to state 68
    Expression                 go to state 69


State 197

   54 Loop_Block: FOR OPEN_PAR For_Control CLOSE_PAR Level_PP . Statement Clear_Level Level_MM

    MINUS       shift, and go to state 41
    INCREMENT   shift, and go to state 42
    DECREMENT   shift, and go to state 43
    IF          shift, and go to state 44
    SWITCH      shift, and go to state 45
    BREAK       shift, and go to state 46
    CONTINUE    shift, and go to state 47
    WHILE       shift, and go to state 48
    FOR         shift, and go to state 49
    OPEN_PAR    shift, and go to state 50
    OPEN_CURLY  shift, and go to state 15
    SEMI        shift, and go to state 51
    INT         shift, and go to state 52
    FLOAT       shift, and go to state 53
    RETURN      shift, and go to state 54
    REAL        shift, and go to state 55
    ID          shift, and go to state 56

    Var_Decl                   go to state 57
    Var                        go to state 58
    Var_Asgn                   go to state 59
    Func_Call                  go to state 60
    Statement                  go to state 208
    Non_Conditional_Statement  go to state 63
    Block                      go to state 64
    Loop_Block                 go to state 65
    Conditional_Block          go to state 66
    If_Else_Block              go to state 67
    Switch_Block               go to state 68
    Expression                 go to state 69


State 198

   57 For_Control: Init_Statement SEMI Expression .
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 57 (For_Control)


State 199

   56 For_Control: Init_Statement Condition SEMI . Expression

    MINUS      shift, and go to state 41
    INCREMENT  shift, and go to state 42
    DECREMENT  shift, and go to state 43
    OPEN_PAR   shift, and go to state 50
    REAL       shift, and go to state 55
    ID         shift, and go to state 56

    Var         go to state 58
    Var_Asgn    go to state 59
    Func_Call   go to state 60
    Expression  go to state 209


State 200

   34 Param_List: Expression COMMA Param_List .

    $default  reduce using rule 34 (Param_List)


State 201

   19 Dim_List: Expression COMMA Dim_List .

    $default  reduce using rule 19 (Dim_List)


State 202

   62 If_Else_Block: IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement . Clear_Level Level_MM
   63              | IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement . Clear_Level Level_MM ELSE Level_PP Statement Clear_Level Level_MM

    $default  reduce using rule 105 (Clear_Level)

    Clear_Level  go to state 210


State 203

   66 Switch_Body: CASE . Constant_Expression COLON Level_PP Statements Clear_Level Level_MM Switch_Body
   68            | CASE . Constant_Expression COLON Level_PP Statements Clear_Level Level_MM

    MINUS     shift, and go to state 120
    OPEN_PAR  shift, and go to state 121
    REAL      shift, and go to state 122

    Constant_Expression  go to state 211


State 204

   67 Switch_Body: DEFAULT . COLON Level_PP Statements Clear_Level Level_MM Switch_Body
   69            | DEFAULT . COLON Level_PP Statements Clear_Level Level_MM

    COLON  shift, and go to state 212


State 205

   65 Switch_Block: SWITCH OPEN_PAR Var CLOSE_PAR OPEN_CURLY Switch_Body . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 213


State 206

   64 Switch_Block: SWITCH OPEN_PAR Constant_Expression CLOSE_PAR OPEN_CURLY Switch_Body . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 214


State 207

   55 Loop_Block: WHILE OPEN_PAR Condition CLOSE_PAR Level_PP Statement . Clear_Level Level_MM

    $default  reduce using rule 105 (Clear_Level)

    Clear_Level  go to state 215


State 208

   54 Loop_Block: FOR OPEN_PAR For_Control CLOSE_PAR Level_PP Statement . Clear_Level Level_MM

    $default  reduce using rule 105 (Clear_Level)

    Clear_Level  go to state 216


State 209

   56 For_Control: Init_Statement Condition SEMI Expression .
   97 Expression: Expression . PLUS Expression
   98           | Expression . MINUS Expression
   99           | Expression . TIMES Expression
  100           | Expression . DIVIDE Expression
  101           | Expression . MODULO Expression

    PLUS    shift, and go to state 102
    MINUS   shift, and go to state 103
    TIMES   shift, and go to state 104
    DIVIDE  shift, and go to state 105
    MODULO  shift, and go to state 106

    $default  reduce using rule 56 (For_Control)


State 210

   62 If_Else_Block: IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level . Level_MM
   63              | IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level . Level_MM ELSE Level_PP Statement Clear_Level Level_MM

    $default  reduce using rule 104 (Level_MM)

    Level_MM  go to state 217


State 211

   66 Switch_Body: CASE Constant_Expression . COLON Level_PP Statements Clear_Level Level_MM Switch_Body
   68            | CASE Constant_Expression . COLON Level_PP Statements Clear_Level Level_MM
   82 Constant_Expression: Constant_Expression . PLUS Constant_Expression
   83                    | Constant_Expression . MINUS Constant_Expression
   84                    | Constant_Expression . TIMES Constant_Expression
   85                    | Constant_Expression . DIVIDE Constant_Expression
   86                    | Constant_Expression . MODULO Constant_Expression

    PLUS    shift, and go to state 161
    MINUS   shift, and go to state 162
    TIMES   shift, and go to state 163
    DIVIDE  shift, and go to state 164
    MODULO  shift, and go to state 165
    COLON   shift, and go to state 218


State 212

   67 Switch_Body: DEFAULT COLON . Level_PP Statements Clear_Level Level_MM Switch_Body
   69            | DEFAULT COLON . Level_PP Statements Clear_Level Level_MM

    $default  reduce using rule 103 (Level_PP)

    Level_PP  go to state 219


State 213

   65 Switch_Block: SWITCH OPEN_PAR Var CLOSE_PAR OPEN_CURLY Switch_Body CLOSE_CURLY .

    $default  reduce using rule 65 (Switch_Block)


State 214

   64 Switch_Block: SWITCH OPEN_PAR Constant_Expression CLOSE_PAR OPEN_CURLY Switch_Body CLOSE_CURLY .

    $default  reduce using rule 64 (Switch_Block)


State 215

   55 Loop_Block: WHILE OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level . Level_MM

    $default  reduce using rule 104 (Level_MM)

    Level_MM  go to state 220


State 216

   54 Loop_Block: FOR OPEN_PAR For_Control CLOSE_PAR Level_PP Statement Clear_Level . Level_MM

    $default  reduce using rule 104 (Level_MM)

    Level_MM  go to state 221


State 217

   62 If_Else_Block: IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM .
   63              | IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM . ELSE Level_PP Statement Clear_Level Level_MM

    ELSE  shift, and go to state 222

    $default  reduce using rule 62 (If_Else_Block)


State 218

   66 Switch_Body: CASE Constant_Expression COLON . Level_PP Statements Clear_Level Level_MM Switch_Body
   68            | CASE Constant_Expression COLON . Level_PP Statements Clear_Level Level_MM

    $default  reduce using rule 103 (Level_PP)

    Level_PP  go to state 223


State 219

   67 Switch_Body: DEFAULT COLON Level_PP . Statements Clear_Level Level_MM Switch_Body
   69            | DEFAULT COLON Level_PP . Statements Clear_Level Level_MM

    MINUS       shift, and go to state 41
    INCREMENT   shift, and go to state 42
    DECREMENT   shift, and go to state 43
    IF          shift, and go to state 44
    SWITCH      shift, and go to state 45
    BREAK       shift, and go to state 46
    CONTINUE    shift, and go to state 47
    WHILE       shift, and go to state 48
    FOR         shift, and go to state 49
    OPEN_PAR    shift, and go to state 50
    OPEN_CURLY  shift, and go to state 15
    SEMI        shift, and go to state 51
    INT         shift, and go to state 52
    FLOAT       shift, and go to state 53
    RETURN      shift, and go to state 54
    REAL        shift, and go to state 55
    ID          shift, and go to state 56

    Var_Decl                   go to state 57
    Var                        go to state 58
    Var_Asgn                   go to state 59
    Func_Call                  go to state 60
    Statements                 go to state 224
    Statement                  go to state 62
    Non_Conditional_Statement  go to state 63
    Block                      go to state 64
    Loop_Block                 go to state 65
    Conditional_Block          go to state 66
    If_Else_Block              go to state 67
    Switch_Block               go to state 68
    Expression                 go to state 69


State 220

   55 Loop_Block: WHILE OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM .

    $default  reduce using rule 55 (Loop_Block)


State 221

   54 Loop_Block: FOR OPEN_PAR For_Control CLOSE_PAR Level_PP Statement Clear_Level Level_MM .

    $default  reduce using rule 54 (Loop_Block)


State 222

   63 If_Else_Block: IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM ELSE . Level_PP Statement Clear_Level Level_MM

    $default  reduce using rule 103 (Level_PP)

    Level_PP  go to state 225


State 223

   66 Switch_Body: CASE Constant_Expression COLON Level_PP . Statements Clear_Level Level_MM Switch_Body
   68            | CASE Constant_Expression COLON Level_PP . Statements Clear_Level Level_MM

    MINUS       shift, and go to state 41
    INCREMENT   shift, and go to state 42
    DECREMENT   shift, and go to state 43
    IF          shift, and go to state 44
    SWITCH      shift, and go to state 45
    BREAK       shift, and go to state 46
    CONTINUE    shift, and go to state 47
    WHILE       shift, and go to state 48
    FOR         shift, and go to state 49
    OPEN_PAR    shift, and go to state 50
    OPEN_CURLY  shift, and go to state 15
    SEMI        shift, and go to state 51
    INT         shift, and go to state 52
    FLOAT       shift, and go to state 53
    RETURN      shift, and go to state 54
    REAL        shift, and go to state 55
    ID          shift, and go to state 56

    Var_Decl                   go to state 57
    Var                        go to state 58
    Var_Asgn                   go to state 59
    Func_Call                  go to state 60
    Statements                 go to state 226
    Statement                  go to state 62
    Non_Conditional_Statement  go to state 63
    Block                      go to state 64
    Loop_Block                 go to state 65
    Conditional_Block          go to state 66
    If_Else_Block              go to state 67
    Switch_Block               go to state 68
    Expression                 go to state 69


State 224

   67 Switch_Body: DEFAULT COLON Level_PP Statements . Clear_Level Level_MM Switch_Body
   69            | DEFAULT COLON Level_PP Statements . Clear_Level Level_MM

    $default  reduce using rule 105 (Clear_Level)

    Clear_Level  go to state 227


State 225

   63 If_Else_Block: IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM ELSE Level_PP . Statement Clear_Level Level_MM

    MINUS       shift, and go to state 41
    INCREMENT   shift, and go to state 42
    DECREMENT   shift, and go to state 43
    IF          shift, and go to state 44
    SWITCH      shift, and go to state 45
    BREAK       shift, and go to state 46
    CONTINUE    shift, and go to state 47
    WHILE       shift, and go to state 48
    FOR         shift, and go to state 49
    OPEN_PAR    shift, and go to state 50
    OPEN_CURLY  shift, and go to state 15
    SEMI        shift, and go to state 51
    INT         shift, and go to state 52
    FLOAT       shift, and go to state 53
    RETURN      shift, and go to state 54
    REAL        shift, and go to state 55
    ID          shift, and go to state 56

    Var_Decl                   go to state 57
    Var                        go to state 58
    Var_Asgn                   go to state 59
    Func_Call                  go to state 60
    Statement                  go to state 228
    Non_Conditional_Statement  go to state 63
    Block                      go to state 64
    Loop_Block                 go to state 65
    Conditional_Block          go to state 66
    If_Else_Block              go to state 67
    Switch_Block               go to state 68
    Expression                 go to state 69


State 226

   66 Switch_Body: CASE Constant_Expression COLON Level_PP Statements . Clear_Level Level_MM Switch_Body
   68            | CASE Constant_Expression COLON Level_PP Statements . Clear_Level Level_MM

    $default  reduce using rule 105 (Clear_Level)

    Clear_Level  go to state 229


State 227

   67 Switch_Body: DEFAULT COLON Level_PP Statements Clear_Level . Level_MM Switch_Body
   69            | DEFAULT COLON Level_PP Statements Clear_Level . Level_MM

    $default  reduce using rule 104 (Level_MM)

    Level_MM  go to state 230


State 228

   63 If_Else_Block: IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM ELSE Level_PP Statement . Clear_Level Level_MM

    $default  reduce using rule 105 (Clear_Level)

    Clear_Level  go to state 231


State 229

   66 Switch_Body: CASE Constant_Expression COLON Level_PP Statements Clear_Level . Level_MM Switch_Body
   68            | CASE Constant_Expression COLON Level_PP Statements Clear_Level . Level_MM

    $default  reduce using rule 104 (Level_MM)

    Level_MM  go to state 232


State 230

   67 Switch_Body: DEFAULT COLON Level_PP Statements Clear_Level Level_MM . Switch_Body
   69            | DEFAULT COLON Level_PP Statements Clear_Level Level_MM .

    CASE     shift, and go to state 203
    DEFAULT  shift, and go to state 204

    $default  reduce using rule 69 (Switch_Body)

    Switch_Body  go to state 233


State 231

   63 If_Else_Block: IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM ELSE Level_PP Statement Clear_Level . Level_MM

    $default  reduce using rule 104 (Level_MM)

    Level_MM  go to state 234


State 232

   66 Switch_Body: CASE Constant_Expression COLON Level_PP Statements Clear_Level Level_MM . Switch_Body
   68            | CASE Constant_Expression COLON Level_PP Statements Clear_Level Level_MM .

    CASE     shift, and go to state 203
    DEFAULT  shift, and go to state 204

    $default  reduce using rule 68 (Switch_Body)

    Switch_Body  go to state 235


State 233

   67 Switch_Body: DEFAULT COLON Level_PP Statements Clear_Level Level_MM Switch_Body .

    $default  reduce using rule 67 (Switch_Body)


State 234

   63 If_Else_Block: IF OPEN_PAR Condition CLOSE_PAR Level_PP Statement Clear_Level Level_MM ELSE Level_PP Statement Clear_Level Level_MM .

    $default  reduce using rule 63 (If_Else_Block)


State 235

   66 Switch_Body: CASE Constant_Expression COLON Level_PP Statements Clear_Level Level_MM Switch_Body .

    $default  reduce using rule 66 (Switch_Body)
